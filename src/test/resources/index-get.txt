Empty Response OK
    | []
    | /test/posts?fields[posts]=title&filter[id]=-1
    | posts
    | 200
    | {'jsonapi':{'version':'1.0'},'data':[]}
    @
Invalid Resource Type
    | []
    | /test/zombies
    | zombies
    | 404
    | {'errors':[{'status':'404','title':'Not Found','detail':'The requested resource can not be found.'}]}
    @
################### Fields Validation @
Valid Resource Fields (Relationship)
    | []
    | /test/posts?fields[comments]=text
    | posts
    | 200
    | {'jsonapi':{'version':'1.0'},'data':[]}
    @
Invalid Resource Field
    | []
    | /test/posts?fields[posts]=junk
    | posts
    | 400
    | {'errors':[{'source': { 'parameter': 'fields[posts]' }, 'title':'Invalid Query Parameter','detail':'Invalid field: `junk`'}]}
    @
Invalid Fields Resource
    | []
    | /test/posts?fields[zombies]=junk
    | posts
    | 400
    | {'errors':[{'source': { 'parameter': 'fields[zombies]' }, 'title':'Invalid Query Parameter','detail':'Invalid resource type: `zombies`'}]}
    @
################### Include Validation @
Valid Include
    | []
    | /test/posts?include=comments
    | posts
    | 200
    | {'jsonapi':{'version':'1.0'},'data':[]}
    @
Valid Include Doubled
    | []
    | /test/posts?include=comments,comments
    | posts
    | 200
    | {'jsonapi':{'version':'1.0'},'data':[]}
    @
Invalid Include
    | []
    | /test/posts?include=zombies,comments
    | posts
    | 400
    | {'errors':[{'source': { 'parameter': 'include' }, 'title':'Invalid Query Parameter','detail':'Invalid relationship: `zombies`'}]}
    @
################### Filter Validation @
Valid Filter (Local Field)
    | []
    | /test/posts?filter[title]=Some+Value
    | posts
    | 200
    | {'jsonapi':{'version':'1.0'},'data':[]}
    @
Valid Filter (Local Id Field)
    | []
    | /test/posts?filter[id]=1
    | posts
    | 200
    | {'jsonapi':{'version':'1.0'},'data':[]}
    @
Valid Filter (Remote Field)
    | []
    | /test/posts?filter[comments.text]=Some+Value
    | posts
    | 200
    | {'jsonapi':{'version':'1.0'},'data':[]}
    @
Valid Filter (Remote Field LEFT JOIN)
    | []
    | /test/posts?filter[%2bcomments.text]=Some+Value
    | posts
    | 200
    | {'jsonapi':{'version':'1.0'},'data':[]}
    @
Invalid Filter (Remote Field RIGHT JOIN)
    | []
    | /test/posts?filter[comments%2b.text]=Some+Value
    | posts
    | 400
    | {'errors':[{'source': { 'parameter': 'filter[comments+.text]' }, 'title':'Invalid Query Parameter','detail':'Filter path `comments+.text` is not valid'}]}
    @
Invalid Filter (Bad Relationship)
    | []
    | /test/posts?filter[zombies.text]=Some+Value
    | posts
    | 400
    | {'errors':[{'source': { 'parameter': 'filter[zombies.text]' }, 'title':'Invalid Query Parameter','detail':'Filter path `zombies.text` is not valid'}]}
    @
Invalid Filter (No Such Attribute)
    | []
    | /test/posts?filter[junk]=Some+Value
    | posts
    | 400
    | {'errors':[{'source': { 'parameter': 'filter[junk]' }, 'title':'Invalid Query Parameter','detail':'Filter path `junk` is not valid'}]}
    @
################### Filter Validation @
Valid Sort (Ascending)
    | []
    | /test/posts?sort=title
    | posts
    | 200
    | {'jsonapi':{'version':'1.0'},'data':[]}
    @
Valid Sort (Descending)
    | []
    | /test/posts?sort=-title
    | posts
    | 200
    | {'jsonapi':{'version':'1.0'},'data':[]}
    @
Valid Sort (Mixed Asc/Desc)
    | []
    | /test/posts?sort=-title,text
    | posts
    | 200
    | {'jsonapi':{'version':'1.0'},'data':[]}
    @
Invalid Sort (Multiple Parameters)
    | []
    | /test/posts?sort=-title&sort=text
    | posts
    | 400
    | {'errors':[{'source': { 'parameter': 'sort' }, 'title':'Invalid Query Parameter','detail':'Multiple `sort` parameters are not supported'}]}
    @
Invalid Sort (No Such Attribute)
    | []
    | /test/posts?sort=-title,text,something
    | posts
    | 400
    | {'errors':[{'source': { 'parameter': 'sort' }, 'title':'Invalid Query Parameter','detail':'Sort key `something` is not an attribute'}]}
    @
Invalid Paging (Not Numeric Number & Size)
    | []
    | /test/posts?page[number]=a&page[size]=b
    | posts
    | 400
    | {'errors':[
        {
          'source': { 'parameter': 'page[number]' },
          'title':'Invalid Query Parameter','detail':'Page parameter must be an integer' },
        {
          'source': { 'parameter': 'page[size]' },
          'title':'Invalid Query Parameter','detail':'Page parameter must be an integer' }
        ]}
    @
Invalid Paging (Not Numeric Offset & Limit)
    | []
    | /test/posts?page[offset]=a&page[limit]=b
    | posts
    | 400
    | {'errors':[
        {
          'source': { 'parameter': 'page[offset]' },
          'title':'Invalid Query Parameter','detail':'Page parameter must be an integer' },
        {
          'source': { 'parameter': 'page[limit]' },
          'title':'Invalid Query Parameter','detail':'Page parameter must be an integer' }
        ]}
    @
################### Including relationship resources @
Post With Comments
    | [{
        "sql": "INSERT INTO POSTS (id, title, text) VALUES (1, 'Title One', 'A short post, for sure.')"
      },{
        "sql": "INSERT INTO COMMENTS (id, post_id, text) VALUES (1, 1, 'It was too short.')"
      },{
        "sql": "INSERT INTO COMMENTS (id, post_id, text) VALUES (2, 1, 'Yes, write another!')"
      }]
    | /test/posts?include=comments
    | posts
    | 200
    | {
       'jsonapi':{'version':'1.0'},
       'data':[{
         'id': '1',
         'type': 'posts',
         'attributes': {
           'title': 'Title One',
           'text': 'A short post, for sure.'
         },
         'relationships': {
           'comments': {
             'links': {
               'self': '/test/posts/1/relationships/comments',
               'related': '/test/posts/1/comments'
             },
             'data': [{
               'type': 'comments', 'id': '1'
             },{
               'type': 'comments', 'id': '2'
             }]
           },
           'author': {
             'links': {
               'self': '/test/posts/1/relationships/author',
               'related': '/test/posts/1/author'
             },
             'data': null
           }
         },
         "links": {
            "self": "/test/posts/1"
         }
       }],
       "included": [
        {
            "type": "comments",
            "id": "2",
            "attributes": {
                "text": "Yes, write another!"
            },
            "relationships": {
                "post": {
                    "links": {
                        "self": "/test/comments/2/relationships/post",
                        "related": "/test/comments/2/post"
                    }
                }
            },
            "links": {
                "self": "/test/comments/2"
            }
        },
        {
            "type": "comments",
            "id": "1",
            "attributes": {
                "text": "It was too short."
            },
            "relationships": {
                "post": {
                    "links": {
                        "self": "/test/comments/1/relationships/post",
                        "related": "/test/comments/1/post"
                    }
                }
            },
            "links": {
                "self": "/test/comments/1"
            }
        }]
      }
    @
Post With Comments (Uni-directional links w/only text and comments)
    | [{
        "sql": "INSERT INTO POSTS (id, title, text) VALUES (1, 'Title One', 'A short post, for sure.')"
      },{
        "sql": "INSERT INTO COMMENTS (id, post_id, text) VALUES (1, 1, 'It was too short.')"
      },{
        "sql": "INSERT INTO COMMENTS (id, post_id, text) VALUES (2, 1, 'Yes, write another!')"
      }]
    | /test/posts?include=comments&fields[posts]=text,comments&fields[comments]=text
    | posts
    | 200
    | {
       'jsonapi':{'version':'1.0'},
       'data':[{
         'id': '1',
         'type': 'posts',
         'attributes': {
           'text': 'A short post, for sure.'
         },
         'relationships': {
           'comments': {
             'links': {
               'self': '/test/posts/1/relationships/comments',
               'related': '/test/posts/1/comments'
             },
             'data': [{
               'type': 'comments', 'id': '1'
             },{
               'type': 'comments', 'id': '2'
             }]
           }
         },
         "links": {
            "self": "/test/posts/1"
         }
       }],
       "included": [
        {
            "type": "comments",
            "id": "2",
            "attributes": {
                "text": "Yes, write another!"
            },
            "links": {
                "self": "/test/comments/2"
            }
        },
        {
            "type": "comments",
            "id": "1",
            "attributes": {
                "text": "It was too short."
            },
            "links": {
                "self": "/test/comments/1"
            }
        }]
      }
    @
Post With Comments And Paging
    | [{
        "sql": "INSERT INTO POSTS (id, title, text) VALUES (1, 'Title One', 'Text one.')"
      },{
        "sql": "INSERT INTO POSTS (id, title, text) VALUES (2, 'Title Two', 'Text two.')"
      },{
        "sql": "INSERT INTO COMMENTS (id, post_id, text) VALUES (1, 1, 'Comment one.')"
      },{
        "sql": "INSERT INTO COMMENTS (id, post_id, text) VALUES (2, 2, 'Comment two.')"
      }]
    | /test/posts?include=comments&sort=-title&page[size]=1&page[number]=1
    | posts
    | 200
    | {
       'jsonapi':{'version':'1.0'},
       'meta': { 'totalResults': 2 },
       'data':[{
         'id': '2',
         'type': 'posts',
         'attributes': {
           'title': 'Title Two',
           'text': 'Text two.'
         },
         'relationships': {
           'comments': {
             'links': {
               'self': '/test/posts/2/relationships/comments',
               'related': '/test/posts/2/comments'
             },
             'data': [{
               'type': 'comments', 'id': '2'
             }]
           },
           'author': {
             'links': {
               'self': '/test/posts/2/relationships/author',
               'related': '/test/posts/2/author'
             },
             'data': null
           }
         },
         "links": {
            "self": "/test/posts/2"
         }
       }],
       "included": [
        {
            "type": "comments",
            "id": "2",
            "attributes": {
                "text": "Comment two."
            },
            "relationships": {
                "post": {
                    "links": {
                        "self": "/test/comments/2/relationships/post",
                        "related": "/test/comments/2/post"
                    }
                }
            },
            "links": {
                "self": "/test/comments/2"
            }
        }]
      }
    @
Post Paging (Offset with default limit)
    | [{
        "sql": "INSERT INTO POSTS (id, title, text) VALUES (1, 'Title One', 'Text one.')"
      },{
        "sql": "INSERT INTO POSTS (id, title, text) VALUES (2, 'Title Two', 'Text two.')"
      }]
    | /test/posts?sort=title&page[offset]=1
    | posts
    | 200
    | {
       'jsonapi':{'version':'1.0'},
       'meta': { 'totalResults': 2 },
       'data':[{
         'id': '2',
         'type': 'posts',
         'attributes': {
           'title': 'Title Two',
           'text': 'Text two.'
         },
         'relationships': {
           'comments': {
             'links': {
               'self': '/test/posts/2/relationships/comments',
               'related': '/test/posts/2/comments'
             },
             'meta': {
               'count': 0
             },
             'data': []
           },
           'author': {
             'links': {
               'self': '/test/posts/2/relationships/author',
               'related': '/test/posts/2/author'
             },
             'data': null
           }
         },
         "links": {
            "self": "/test/posts/2"
         }
       }]
      }
    @
Post Paging (Number with default size)
    | [{
        "sql": "INSERT INTO POSTS (id, title, text) VALUES (1, 'Title One', 'Text one.')"
      },{
        "sql": "INSERT INTO POSTS (id, title, text) VALUES (2, 'Title Two', 'Text two.')"
      }]
    | /test/posts?sort=title&page[number]=2
    | posts
    | 200
    | {
       'jsonapi':{'version':'1.0'},
       'meta': { 'totalResults': 2 },
       'data':[]
      }
    @
Post Paging (Limit without offset)
    | [{
        "sql": "INSERT INTO POSTS (id, title, text) VALUES (1, 'Title One', 'Text one.')"
      },{
        "sql": "INSERT INTO POSTS (id, title, text) VALUES (2, 'Title Two', 'Text two.')"
      }]
    | /test/posts?sort=-title&page[limit]=1
    | posts
    | 200
    | {
       'jsonapi':{'version':'1.0'},
       'meta': { 'totalResults': 2 },
       'data':[{
         'id': '2',
         'type': 'posts',
         'attributes': {
           'title': 'Title Two',
           'text': 'Text two.'
         },
         'relationships': {
           'comments': {
             'links': {
               'self': '/test/posts/2/relationships/comments',
               'related': '/test/posts/2/comments'
             },
             'meta': {
               'count': 0
             },
             'data': []
           },
           'author': {
             'links': {
               'self': '/test/posts/2/relationships/author',
               'related': '/test/posts/2/author'
             },
             'data': null
           }
         },
         "links": {
            "self": "/test/posts/2"
         }
       }]
      }
    @
Post Paging (Size without number)
    | [{
        "sql": "INSERT INTO POSTS (id, title, text) VALUES (1, 'Title One', 'Text one.')"
      },{
        "sql": "INSERT INTO POSTS (id, title, text) VALUES (2, 'Title Two', 'Text two.')"
      }]
    | /test/posts?sort=-title&page[size]=1
    | posts
    | 200
    | {
       'jsonapi':{'version':'1.0'},
       'meta': { 'totalResults': 2 },
       'data':[{
         'id': '2',
         'type': 'posts',
         'attributes': {
           'title': 'Title Two',
           'text': 'Text two.'
         },
         'relationships': {
           'comments': {
             'links': {
               'self': '/test/posts/2/relationships/comments',
               'related': '/test/posts/2/comments'
             },
             'meta': {
               'count': 0
             },
             'data': []
           },
           'author': {
             'links': {
               'self': '/test/posts/2/relationships/author',
               'related': '/test/posts/2/author'
             },
             'data': null
           }
         },
         "links": {
            "self": "/test/posts/2"
         }
       }]
      }
    @
